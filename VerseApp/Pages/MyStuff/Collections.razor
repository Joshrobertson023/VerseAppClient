@page "/"
@namespace VerseApp.Pages.MyStuff
@inject IJSRuntime JSRuntime

<MudOverlay @bind-Visible="overlayVisible" @onclick="CloseDrawer" DarkBackground>
    <MudProgressCircular Style="height: 80px; width: 80px" Color="Color.Secondary" Value="@progress">
        <ChildContent>
            <MudStack Spacing="0" AlignItems="AlignItems.Center" Justify="Justify.Center">
                <MudText Typo="Typo.subtitle2">@progress %</MudText>
            </MudStack>
        </ChildContent>
    </MudProgressCircular>
    @if (!string.IsNullOrEmpty(overlayMessage))
    {
        <h2>@overlayMessage</h2>
    }
    else
    {
        <h2 style="margin-left: 5px;">Loading...</h2>
    }
</MudOverlay>

<div class="scroll-to-top-wrapper">
    <div id="scrollTopBtn"
         class="scroll-to-top-container hidden animate__animated animate__faster">
        ↑ Go to Top
    </div>
</div>

<div class="single-stack hide-scrollbar" id="scrollContainer" style="flex-direction: column; justify-content: flex-start; overflow-y:auto; display:relative;">


    @if (!string.IsNullOrEmpty(errorMessage)) 
    {
        <div>
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Error" Title="Favorite" />
            <p style="margin-left: 5px;">@errorMessage</p> 
        </div>
    }
    @if (isLoading == true) 
    {
        <div style="margin-bottom: 40px;"></div>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100px" Style="margin-top: 25px; border-radius: 6px;"/>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100px" Style="margin-top: 25px; border-radius: 6px;"/>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100px" Style="margin-top: 25px; border-radius: 6px;" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100px" Style="margin-top: 25px; border-radius: 6px;" />
    }
    else 
    {
    @if (reorganizing)
    {
        <MudButton OnClick="Done_Click" Variant="Variant.Outlined">Done</MudButton>

<ul style="list-style:none; padding:0; margin:0;">
  @{
    // sort and count pinned
    var sorted      = reorderList.OrderBy(x => x.Order).ToList();
    var pinnedCount = sorted.Count(x => x.Collection.Pinned == 1);
    var count       = sorted.Count;
  }

  @for (int i = 0; i <= count; i++)
  {
    // 1) placeholder line
    if (i == placeholderIndex)
    {
      <li @key="@($"placeholder-{i}")" class="drop-line"></li>
    }

    // 2) real item if i < count
    if (i < count)
    {
      var item     = sorted[i];
      bool isPinned = item.Collection.Pinned == 1;

      <li
        @key="item.Collection.Id"
        @ondragover:preventDefault
        @ondragover="() => OnDragOver(i, pinnedCount)"
        @ondragleave="() => ClearPlaceholder()"
        @ondrop="() => HandleDrop(item, pinnedCount)"
        style="padding:4px 0;"
      >
        <div
          draggable="true"
          style="display:flex; align-items:center; cursor:move;"
          @ondragstart="() => draggingModel = item"
          @ondragend="() => { draggingModel = null; ClearPlaceholder(); }"
        >
          <MudIcon
            Icon="@Icons.Material.Filled.DragIndicator" 
            Size="Size.Small"
            Style="margin-right:8px;"
          />
          @* show pin icon for pinned *@  
          @if (isPinned)
          {
            <MudIcon
              Icon="@Icons.Material.Filled.PushPin"
              Size="Size.Small"
              Style="margin-right:8px;"
            />
          }
          <span>@item.Collection.Title</span>
        </div>
      </li>
    }
  }
</ul>
    }
        else
        {
            <div id="top-add" style="width: 100%; display: flex; align-items: center; justify-content: space-between">
                <div style="display: flex; align-items: center; justify-content: flex-start; width: 70%;">
                    <MudSelect @bind-Value="SortBy" 
                               Label="Order By"
                               Style="width: 150px !important; min-width: 150px !important; max-width: 150px !important;"
                               Variant="Variant.Text">
                        @foreach (var option in sortOptions)
                        {
                            <MudSelectItem Value="@option.Key"><p>@option.Value</p></MudSelectItem> 
                        }
                    </MudSelect>
                    @if (SortBy == 4)
                    {
                        <MudButton OnClick="Reorder_Click" Variant="Variant.Outlined" Size="Size.Small" Style="height: 25px !important;" Color="Color.Secondary">Reorder</MudButton>
                    }
                </div>
                <MudButton OnClick="AddCollection"><MudIcon Icon="@Icons.Material.Filled.Add" Title="Add Collection" Size="Size.Small" Color="Color.Secondary" /></MudButton>
            </div>

            @foreach (var collection in data.currentUser.Collections)
            {
                <div class="collection">
                    <a onclick="@(() => OpenCollection(collection))" style="display: flex; cursor: pointer; flex-direction: column; height: 100%; width: 80%; justify-content: space-between;">
                        <div style="display: flex; flex-direction: column;">
                            <h2>@collection.Title</h2>
                            @if (collection.NumVerses == 1) 
                            {
                                <p>@(collection.NumVerses + " Passage")</p>
                            }
                            else
                            {
                                <p>@(collection.NumVerses + " Passages")</p> 
                            }
                        </div>
                        @if (collection.IsPublished == 0)
                        {
                            @if (collection.Visibility == 0)
                            {
                                <p>Private</p>
                            }
                            @if (collection.Visibility == 1)
                            {
                                <p>Visible to Friends</p>
                            }
                            @if (collection.Visibility == 2)
                            {
                                <p>Public</p>
                            }
                        }
                        @if (collection.IsPublished == 1)
                        {  
                            <p>Published</p>  
                        }
                    </a>
                    <div style="display: flex; flex-direction: column; justify-content: space-between;">
                        @if (collection.Pinned == 1)  
                        { 
                            <MudButton OnClick="() => PinCollection(collection)"><MudIcon Icon="@Icons.Material.Filled.PushPin"></MudIcon></MudButton>
                        }
                        else
                        {
                            <MudButton OnClick="() => PinCollection(collection)"><MudIcon Icon="@Icons.Material.Outlined.PushPin"></MudIcon></MudButton>
                        }
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Medium" Color="Color.Secondary" Style="margin-top: -10px !important; margin-right: -10px !important;">
                            <div>
                                <MudMenuItem OnClick="() => EditCollection(collection)">Edit</MudMenuItem>
                                <MudMenuItem OnClick="() => ShareCollection(collection)">Share</MudMenuItem> 
                                <MudMenuItem OnClick="() => PublishCollection(collection)">Publish</MudMenuItem>
                                <MudMenuItem OnClick="() => DeleteCollection(collection)">Delete</MudMenuItem>
                            </div>
                        </MudMenu>
                        <p style="margin-right: 10px !important;">@("@" + collection.Author)</p> 
                        @* @if (collection.Author != data.currentUser.Username)
                        {
                            <p>@collection.Author</p>
                        } *@
                    </div>
                </div>
            }
        }
    }
</div>