@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject MudTheme AppTheme
<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="AppTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<div class="phone-view-outer">
    <div class="phone-view">
        <MudLayout> 


            <div class="top-appbar">
                <MudAppBar Class="px-0 py-0">

                    @if (firstOpen)
                    {
                        <MudTabs Elevation="2" Rounded="true" ActivePanelIndexChanged="@(index => SetMyStuffPage(index))">
                            <MudTabPanel Style="background-color: transparent !important; width: 25% !important;" Text="Collections"></MudTabPanel>
                            <MudTabPanel Style="background-color: transparent !important; width: 25% !important;" Text="Plans"></MudTabPanel>
                        </MudTabs>
                    }
                    else if (secondOpen)
                    {
                        <h3>PageTitle</h3>
                    }
                    else if (thirdOpen)
                    {
                        <h3>PageTitle</h3>
                    }
                    else if (fourthOpen)
                    {
                        <h3>PageTitle</h3>
                    }
                    else // Search
                    {
                        <h3>PageTitle</h3>
                    }
)
                    <MudButton OnClick="@(() => ProfileDrawerToggle(Anchor.End))">
                        @if (!string.IsNullOrEmpty(data.currentUser?.Username))
                        {
                            <MudAvatar Color="Color.Secondary" Variant="Variant.Outlined">
                                @data.currentUser.Username.ToUpper()[0]
                            </MudAvatar>
                        }
                        else
                        {
                            <MudAvatar Color="Color.Tertiary" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Person" />
                        }
                    </MudButton>

                </MudAppBar>
)
            </div>


            <div class="bottom-appbar">
            <MudAppBar Bottom="true" Class="px-0 py-0" Style="height:75px !important;
                                                               display:flex;
                                                               align-items:center;
                                                               justify-content:space-evenly;">
                <div class="d-flex flex-grow-1 no-hover" style="align-items: center; justify-content: space-between; width: 100%;">
                    @if (firstOpen)
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Filled.Article" Ripple="false" Color="Color.Inherit" OnClick="@((e) => MyStuff_Click())" />
                            <p class="icon-text">My Stuff</p>
                        </div>
                    }
                    else
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Outlined.Article" Color="Color.Inherit" OnClick="@((e) => MyStuff_Click())" />
                            <p class="icon-text">My Stuff</p>
                        </div>
                    }
                    @if (secondOpen)
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Filled.AddCircle" Ripple="false" Color="Color.Inherit" OnClick="@((e) => Practice_Click())" />
                            <p class="icon-text">Practice</p>
                        </div>
                    }
                    else
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Inherit" OnClick="@((e) => Practice_Click())" />
                            <p class="icon-text">Practice</p>
                        </div>
                    }
                    <MudIconButton Class="no-hover" Icon="@Icons.Material.Filled.Search" Size="Size.Large" Ripple="false" Color="Color.Inherit" OnClick="@((e) => Search_Click())" />
                    @if (thirdOpen)
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Filled.Book" Ripple="false" Color="Color.Inherit" OnClick="@((e) => Bible_Click())" />
                            <p class="icon-text">Bible</p>
                        </div>
                    }
                    else
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Outlined.Book" Color="Color.Inherit" OnClick="@((e) => Bible_Click())" />
                            <p class="icon-text">Bible</p>
                        </div>
                    }
                    @if (fourthOpen)
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Filled.Person" Ripple="false" Color="Color.Inherit" OnClick="@((e) => Community_Click())" />
                            <p class="icon-text">Community</p>
                        </div>
                    }
                    else
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Outlined.Person" Color="Color.Inherit" OnClick="@((e) => Community_Click())" />
                            <p class="icon-text">Community</p>
                        </div>
                    }
                </div>
            </MudAppBar>

            </div>


            <MudDrawer @bind-Open="@profileDrawerOpen" Style="padding: 15px;" Anchor="Anchor.End">
                <div class="button">
                    <MudButton OnClick="Signout_Click" Variant="Variant.Outlined" FullWidth="true" Color="Color.Secondary" Class="ml-auto">Sign out</MudButton>
                </div>
            </MudDrawer>


            <MudMainContent>
                @Body
            </MudMainContent>
        </MudLayout>
    </div>
</div>

@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;
    [Inject]
    NavigationManager nav { get; set; }
    [Inject]
    DataService dataservice { get; set; }
    [Inject]
    Data data { get; set; }
    private int activeIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");

        if (string.IsNullOrWhiteSpace(token))
        {
            Console.WriteLine("token is null");
            nav.NavigateTo("/authentication/login");
            return;
        }

        try
        {
            data.currentUser = await dataservice.LoginUserWithTokenAsync(token);
            if (data.currentUser == null)
            {
                Console.WriteLine("currentUser is null.");
                nav.NavigateTo("/authentication/login");
            }
            else
            {
                Console.WriteLine($"Logged in with token. UserId = {data.currentUser.Id}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            nav.NavigateTo("/authentication/login");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemDarkModeAsync();
            StateHasChanged();
        }
    }

    bool profileDrawerOpen = false;
    private Anchor anchor;

    void ProfileDrawerToggle(Anchor _anchor)
    {
        profileDrawerOpen = !profileDrawerOpen;
        anchor = _anchor;
    }

    private bool firstOpen = true;
    private bool secondOpen = false;
    private bool thirdOpen = false;
    private bool fourthOpen = false;

    private void MyStuff_Click()
    {
        firstOpen = true;
        secondOpen = false;
        thirdOpen = false;
        fourthOpen = false;
        nav.NavigateTo("/");
    }

    private void Practice_Click()
    {
        firstOpen = false;
        secondOpen = true;
        thirdOpen = false;
        fourthOpen = false;
        nav.NavigateTo("/practice");
    }

    private void Search_Click()
    {
        firstOpen = false;
        secondOpen = false;
        thirdOpen = false;
        fourthOpen = false;
        nav.NavigateTo("/search");
    }

    private void Bible_Click()
    {
        firstOpen = false;
        secondOpen = false;
        thirdOpen = true;
        fourthOpen = false;
        nav.NavigateTo("/bible");
    }

    private void Community_Click()
    {
        firstOpen = false;
        secondOpen = false;
        thirdOpen = false;
        fourthOpen = true;
        nav.NavigateTo("/community");
    }

    private async Task Signout_Click()
    {
        if (data.currentUser != null)
            data.currentUser = new DBAccessLibrary.Models.UserModel();
        await localStorage.ClearAsync();
        nav.NavigateTo("/authentication/login");
    }

    private void SetMyStuffPage(int index)
    {
        activeIndex = index;
        if (index == 0)
        {
            nav.NavigateTo("/");
        }
        else if (index == 1)
        {
            nav.NavigateTo("/mystuff/plans");
        }
    }
}
