@using DBAccessLibrary.Models
@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject MudTheme AppTheme
<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="AppTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<div class="phone-view-outer">
    <div class="phone-view">
        <MudLayout> 


            <div class="top-appbar">
                <MudAppBar Class="px-0 py-0">

                    @if (firstOpen)
                    {
                        if (pageSelected == 0)
                        {
                            <MudButton OnClick="Collections_Click" Variant="Variant.Text" Style="text-decoration: underline; width: 25% !important;">Collections</MudButton>
                            <MudButton OnClick="Plans_Click" Variant="Variant.Text" Style="width: 25% !important;">Plans</MudButton>
                        }
                        else
                        {
                            <MudButton OnClick="Collections_Click" Variant="Variant.Text" Style="width: 25% !important;">Collections</MudButton>
                            <MudButton OnClick="Plans_Click" Variant="Variant.Text" Style="text-decoration: underline; width: 25% !important;">Plans</MudButton>
                        }
                    }
                    else if (secondOpen)
                    {
                        <h3>PageTitle</h3>
                    }
                    else if (thirdOpen)
                    {
                        <h3>PageTitle</h3>
                    }
                    else if (fourthOpen)
                    {
                        <h3>PageTitle</h3>
                    }
                    else // Search
                    {
                        <h3>PageTitle</h3>
                    }


                    <div style="display: flex; align-items: center;">
                        @* -- Notifications -- *@
                        <MudButton OnClick="ToggleNotificationsOpen">
                            @if (data.currentUser.NotificationsUnseen.Count == 0)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Notifications" Size="Size.Medium"></MudIcon>
                            }
                            else 
                            {
                                <MudBadge Content="@data.currentUser.Notifications.Count" Overlap="true" Color="Color.Error" Style="margin-top: 15px !important; margin-right: 5px !important;">
                                    <MudIcon Icon="@Icons.Material.Filled.Notifications" Size="Size.Medium"></MudIcon>
                                </MudBadge>
                            }
                        </MudButton>
                         
                        @* -- Profile button -- *@
                        <MudButton OnClick="@(() => ProfileDrawerToggle(Anchor.End))"> 
                            @if (!string.IsNullOrEmpty(data.currentUser?.Username))
                            {
                                <MudAvatar Color="Color.Secondary" Variant="Variant.Outlined">
                                    @data.currentUser.Username.ToUpper()[0]
                                </MudAvatar>
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Person" />
                            }
                        </MudButton>
                    </div>

                    <MudPopover Open="@notificationsOpen" Class="notifications-popover" Style="display: flex; flex-direction: column; align-items: flex-start; justify-content: start; overflow-y: auto; overflow-x:hidden; fixed !important; top: 100px !important; right: 24px !important; left: auto !important; padding: 24px !important;">
                        @if (data.currentUser.Notifications.Count == 0)
                        {
                            <h3>No Notifications</h3>
                        }
                        else
                        {
                            foreach (var notification in data.currentUser.Notifications)
                            {
                                <div style="display: flex; width: 100%; align-items: center; justify-content: space-between; height: fit-content; margin-bottom: 10px;">
                                    <div style="width: 5%; margin-left: -20px; margin-right: -5px;">
                                        @if (notification.Seen == 0)
                                        {
                                            <div style="border-radius: 50px; width: 10px; height: 10px; background-color: #0F47D7;"></div>
                                        }
                                    </div>
                                    <div style="width: 18%;">
                                        @if (notification.SentBy != "VerseApp Team")
                                        {
                                            <MudAvatar Color="Color.Secondary">@notification.SentBy.ToUpper()[0]</MudAvatar>
                                        }
                                        else
                                        {
                                            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.AdminPanelSettings"></MudIcon>
                                        }
                                    </div>
                                    <div style="width: 75%; display: flex; flex-direction: column; align-items: flex-start; justify-content: center;">
                                        <h3>@notification.Title</h3>
                                        <p>@notification.Message</p>
                                        <p style="font-size: 8px; font-weight: 100;">@DateTimeParser.GetNotificationSentTime(notification.DateCreated)</p>
                                    </div>
                                    <div style="width: 15%;">
                                        <MudButton OnClick="() => DeleteNotification(notification)">
                                            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Close"></MudIcon>
                                        </MudButton>
                                    </div>
                                </div>
                            }
                        }
                    </MudPopover>

                </MudAppBar>
)
            </div>


            <div class="bottom-appbar">
            <MudAppBar Bottom="true" Class="px-0 py-0" Style="height:75px !important;
                                                               display:flex;
                                                               align-items:center;
                                                               justify-content:space-evenly;">
                <div id="icons">
                    @if (firstOpen)
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Filled.Article" Ripple="false" Color="Color.Inherit" OnClick="@((e) => MyStuff_Click())" />
                            <p class="icon-text">My Stuff</p>
                        </div>
                    }
                    else
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Outlined.Article" Color="Color.Inherit" OnClick="@((e) => MyStuff_Click())" />
                            <p class="icon-text">My Stuff</p>
                        </div>
                    }
                    @if (secondOpen)
                    {
                        <div class="icon-div">
                                <MudIconButton Class="no-hover" Icon="@Icons.Material.Filled.Lightbulb" Ripple="false" Color="Color.Inherit" OnClick="@((e) => Practice_Click())" />
                            <p class="icon-text">Practice</p>
                        </div>
                    }
                    else
                    {
                        <div class="icon-div">
                                <MudIconButton Class="no-hover" Icon="@Icons.Material.Outlined.Lightbulb" Color="Color.Inherit" OnClick="@((e) => Practice_Click())" />
                            <p class="icon-text">Practice</p>
                        </div>
                    }
                    <MudIconButton Class="no-hover search-icon" Icon="@Icons.Material.Filled.Search" Size="Size.Large" Ripple="false" Color="Color.Inherit" OnClick="@((e) => Search_Click())" />
                    @if (thirdOpen)
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Filled.Book" Ripple="false" Color="Color.Inherit" OnClick="@((e) => Bible_Click())" />
                            <p class="icon-text">Bible</p>
                        </div>
                    }
                    else
                    {
                        <div class="icon-div">
                            <MudIconButton Class="no-hover" Icon="@Icons.Material.Outlined.Book" Color="Color.Inherit" OnClick="@((e) => Bible_Click())" />
                            <p class="icon-text">Bible</p>
                        </div>
                    }
                    @if (fourthOpen)
                    {
                        <div class="icon-div">
                                <MudIconButton Class="no-hover" Icon="@Icons.Material.Filled.Explore" Ripple="false" Color="Color.Inherit" OnClick="@((e) => Community_Click())" />
                            <p class="icon-text">Community</p>
                        </div>
                    }
                    else
                    {
                        <div class="icon-div">
                                <MudIconButton Class="no-hover" Icon="@Icons.Material.Outlined.Explore" Color="Color.Inherit" OnClick="@((e) => Community_Click())" />
                            <p class="icon-text">Community</p>
                        </div>
                    }
                </div>
            </MudAppBar>

            </div>


            <MudDrawer @bind-Open="@profileDrawerOpen" Style="padding: 15px;" Anchor="Anchor.End">
                @if(data.Admins.Contains(data.currentUser.Username))
                {
                    <div class="button">
                        <MudButton OnClick="Admin_Click" Variant="Variant.Outlined" FullWidth="true" Color="Color.Secondary" Class="ml-auto">Admin Portal</MudButton>
                    </div>
                }
                <div class="button">
                    <MudButton OnClick="Signout_Click" Variant="Variant.Outlined" FullWidth="true" Color="Color.Secondary" Class="ml-auto">Sign out</MudButton>
                </div>
            </MudDrawer>


            <MudMainContent>
                @Body
            </MudMainContent>
        </MudLayout>
    </div>
</div>

@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;
    [Inject]
    NavigationManager nav { get; set; }
    [Inject]
    DataService dataservice { get; set; }
    [Inject]
    Data data { get; set; }
    private int activeIndex = 0;
    private int numNotifications { get; set; } = 0;
    private bool notificationsOpen = false;

    private void Admin_Click()
    {
        nav.NavigateTo("/adminportal");
    }

    private async Task ToggleNotificationsOpen()
    {
        notificationsOpen = !notificationsOpen;

        if (notificationsOpen)
            return;

        if (data.currentUser.Notifications.Count > 0)
        {
            foreach (var notification in data.currentUser.Notifications)
            {
                if (notification.Seen == 0)
                {
                    notification.Seen = 1;
                    await dataservice.MarkNotificationAsRead(notification.Id);
                    data.currentUser.NotificationsUnseen.RemoveAll(n => n.Id == notification.Id);
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");

        if (string.IsNullOrWhiteSpace(token))
        {
            Console.WriteLine("token is null");
            nav.NavigateTo("/authentication/login");
            return;
        }

        try
        {
            data.currentUser = await dataservice.LoginUserWithTokenAsync(token);
            data.currentUser.Notifications = await dataservice.GetUserNotifications(data.currentUser.Username);
            _ = PollNotificationsAsync();
            if (data.currentUser == null)
            {
                Console.WriteLine("currentUser is null.");
                nav.NavigateTo("/authentication/login");
            }
            else
            {
                Console.WriteLine($"Logged in with token. UserId = {data.currentUser.Id}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            nav.NavigateTo("/authentication/login");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _isDarkMode = await _mudThemeProvider.GetSystemDarkModeAsync();
        StateHasChanged();
    }

    private async Task PollNotificationsAsync()
    {
        while (true)
        {
            if (!string.IsNullOrEmpty(data.currentUser.Username))
            {
                data.currentUser.Notifications = await dataservice.GetUserNotifications(data.currentUser.Username);
                Console.WriteLine("Requested user notifications.");
                await InvokeAsync(StateHasChanged);
            }

            await Task.Delay(TimeSpan.FromSeconds(30));
        }
    }



    bool profileDrawerOpen = false;
    private Anchor anchor;

    void ProfileDrawerToggle(Anchor _anchor)
    {
        profileDrawerOpen = !profileDrawerOpen;
        anchor = _anchor;
    }

    private bool firstOpen = true;
    private bool secondOpen = false;
    private bool thirdOpen = false;
    private bool fourthOpen = false;

    private void MyStuff_Click()
    {
        firstOpen = true;
        secondOpen = false;
        thirdOpen = false;
        fourthOpen = false;
        nav.NavigateTo("/");
    }

    private void Practice_Click()
    {
        firstOpen = false;
        secondOpen = true;
        thirdOpen = false;
        fourthOpen = false;
        nav.NavigateTo("/practice");
    }

    private void Search_Click()
    {
        firstOpen = false;
        secondOpen = false;
        thirdOpen = false;
        fourthOpen = false;
        nav.NavigateTo("/search");
    }

    private void Bible_Click()
    {
        firstOpen = false;
        secondOpen = false;
        thirdOpen = true;
        fourthOpen = false;
        nav.NavigateTo("/bible");
    }

    private void Community_Click()
    {
        firstOpen = false;
        secondOpen = false;
        thirdOpen = false;
        fourthOpen = true;
        nav.NavigateTo("/community");
    }

    private async Task Signout_Click()
    {
        if (data.currentUser != null)
            data.currentUser = new DBAccessLibrary.Models.UserModel();
        await localStorage.ClearAsync();
        nav.NavigateTo("/authentication/login");
    }

    private int pageSelected = 0;
    private void Collections_Click()
    {
        nav.NavigateTo("/");
        pageSelected = 0;
    }

    private void Plans_Click()
    {
        nav.NavigateTo("/mystuff/plans");
        pageSelected = 1;
    }

    private async Task DeleteNotification(Notification notification)
    {
        try
        {
            await dataservice.DeleteNotification(notification.Id);
            data.currentUser.Notifications.Remove(notification);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting notification: {ex.Message}");
        }
    }
}
